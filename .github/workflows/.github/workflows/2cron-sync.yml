name: Supabase Cron Sync

on:
  schedule:
    - cron: "*/15 * * * *" # Executa a cada 15 minutos
  workflow_dispatch:
    inputs:
      dry:
        description: "Dry run (não persiste)"
        required: false
        default: "false"
      league:
        description: "Opcional: restringe a uma liga/chave"
        required: false
        default: ""

env:
  SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  run-cron-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: supabase-cron-sync
      cancel-in-progress: false
    steps:
      - name: Validar secrets
        shell: bash
        run: |
          if [ -z "$SUPABASE_PROJECT_REF" ]; then
            echo "Falta o secret SUPABASE_PROJECT_REF"; exit 1; fi
          if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
            echo "Falta o secret SUPABASE_SERVICE_ROLE_KEY"; exit 1; fi

      - name: Invocar função cron-sync
        id: invoke
        shell: bash
        run: |
          BASE="https://${SUPABASE_PROJECT_REF}.supabase.co/functions/v1"
          DRY="${{ github.event.inputs.dry }}"
          LEAGUE="${{ github.event.inputs.league }}"
          QS=""
          if [ "$DRY" = "true" ]; then QS="${QS}dry=true&"; fi
          if [ -n "$LEAGUE" ]; then QS="${QS}league=${LEAGUE}&"; fi
          QS="${QS}trigger=github-actions"
          URL="${BASE}/cron-sync?${QS}"
          echo "Chamando: $URL"
          set -o pipefail
          # Captura status HTTP e corpo; usa SERVICE ROLE para garantir persistência
          HTTP_STATUS=$(mktemp)
          BODY=$(mktemp)
          curl -sS -w "%{http_code}" -o "$BODY" -X GET \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            "$URL" > "$HTTP_STATUS"
          STATUS=$(cat "$HTTP_STATUS")
          RESPONSE=$(cat "$BODY")
          echo "HTTP_STATUS: $STATUS"
          echo "$RESPONSE"
          echo "status=${STATUS}" >> "$GITHUB_OUTPUT"
          echo "response=${RESPONSE}" >> "$GITHUB_OUTPUT"
          if [ "$STATUS" -lt 200 ] || [ "$STATUS" -ge 300 ]; then
            echo "Falha na chamada da função (status $STATUS)" >&2
            exit 1
          fi

      - name: Exibir resposta resumida
        shell: bash
        run: |
          echo "Saída da função:"
          echo "${{ steps.invoke.outputs.response }}" | head -n 50
          echo "Status HTTP:" "${{ steps.invoke.outputs.status }}"
