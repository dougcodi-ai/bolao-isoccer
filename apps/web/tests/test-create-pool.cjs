require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function testCreatePool() {
  console.log('üß™ Testando cria√ß√£o de bol√£o...\n');

  try {
    // 1. Login com usu√°rio de teste
    console.log('1. Fazendo login...');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'teste@bolao.com',
      password: '123456789'
    });

    if (authError) {
      console.error('‚ùå Erro no login:', authError.message);
      return;
    }

    console.log('‚úÖ Login realizado com sucesso');
    console.log('   - Usu√°rio:', authData.user.email);
    console.log('   - ID:', authData.user.id);

    // 2. Gerar c√≥digo √∫nico
    console.log('\n2. Gerando c√≥digo √∫nico...');
    
    function generateCode(length = 6) {
      const chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
      let result = "";
      for (let i = 0; i < length; i++) {
        result += chars[Math.floor(Math.random() * chars.length)];
      }
      return result;
    }

    async function generateUniqueCode(maxAttempts = 10) {
      for (let attempt = 0; attempt < maxAttempts; attempt++) {
        const code = generateCode(6);
        
        const { data, error } = await supabase
          .from("pools")
          .select("id")
          .eq("code", code)
          .maybeSingle();
        
        if (!error && !data) {
          return code;
        }
      }
      
      return `IS-${Date.now().toString(36).toUpperCase()}`;
    }

    const uniqueCode = await generateUniqueCode();
    console.log('‚úÖ C√≥digo √∫nico gerado:', uniqueCode);

    // 3. Criar bol√£o de teste
    console.log('\n3. Criando bol√£o de teste...');
    
    const poolData = {
      name: `Teste Bol√£o ${Date.now()}`,
      owner_id: authData.user.id,
      code: uniqueCode,
      premium: false,
      max_members: 10,
      created_at: new Date().toISOString(),
    };

    console.log('   - Dados do bol√£o:', poolData);

    const { data: poolResult, error: poolError } = await supabase
      .from("pools")
      .insert(poolData)
      .select("id, code, name")
      .single();

    if (poolError) {
      console.error('‚ùå Erro ao criar bol√£o:', poolError.message);
      return;
    }

    console.log('‚úÖ Bol√£o criado com sucesso!');
    console.log('   - ID:', poolResult.id);
    console.log('   - Nome:', poolResult.name);
    console.log('   - C√≥digo:', poolResult.code);

    // 4. Adicionar criador como owner
    console.log('\n4. Adicionando criador como owner...');
    
    const { error: memberError } = await supabase
      .from("pool_members")
      .insert({
        pool_id: poolResult.id,
        user_id: authData.user.id,
        role: "owner",
        joined_at: new Date().toISOString(),
      });

    if (memberError) {
      console.error('‚ùå Erro ao adicionar como membro:', memberError.message);
      return;
    }

    console.log('‚úÖ Usu√°rio adicionado como owner do bol√£o');

    // 5. Verificar se bol√£o aparece na lista do usu√°rio
    console.log('\n5. Verificando se bol√£o aparece na lista do usu√°rio...');
    
    const { data: userPools, error: poolsError } = await supabase
      .from('pool_members')
      .select(`
        pool_id,
        role,
        pools!inner(id, name, code, owner_id, premium, max_members, created_at)
      `)
      .eq('user_id', authData.user.id);

    if (poolsError) {
      console.error('‚ùå Erro ao buscar bol√µes do usu√°rio:', poolsError.message);
      return;
    }

    console.log('‚úÖ Bol√µes do usu√°rio encontrados:', userPools.length);
    
    const createdPool = userPools.find(p => p.pools.id === poolResult.id);
    if (createdPool) {
      console.log('‚úÖ Bol√£o criado encontrado na lista do usu√°rio!');
      console.log('   - Nome:', createdPool.pools.name);
      console.log('   - Papel:', createdPool.role);
      console.log('   - C√≥digo:', createdPool.pools.code);
    } else {
      console.log('‚ùå Bol√£o criado N√ÉO encontrado na lista do usu√°rio');
    }

    // 6. Testar gera√ß√£o de calend√°rio de partidas (opcional)
    console.log('\n6. Testando gera√ß√£o de calend√°rio de partidas...');
    
    try {
      const response = await fetch(`http://localhost:3002/api/pools/${poolResult.id}/ensure-matches`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authData.session.access_token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        console.log('‚úÖ Calend√°rio de partidas gerado com sucesso');
      } else {
        console.log('‚ö†Ô∏è Falha ao gerar calend√°rio de partidas (n√£o cr√≠tico)');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao gerar calend√°rio de partidas (n√£o cr√≠tico):', error.message);
    }

    console.log('\nüéâ Teste de cria√ß√£o de bol√£o conclu√≠do com sucesso!');
    console.log('üìã Resumo:');
    console.log(`   - Bol√£o criado: ${poolResult.name}`);
    console.log(`   - C√≥digo de convite: ${poolResult.code}`);
    console.log(`   - ID do bol√£o: ${poolResult.id}`);
    console.log(`   - Campeonato: ${poolData.championship}`);
    console.log(`   - M√°ximo de membros: ${poolData.max_members}`);

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
  }
}

testCreatePool();